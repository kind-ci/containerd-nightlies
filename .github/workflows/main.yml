name: Nightly

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        branches: ["release/1.6", "relase/1.7", "main"]

    steps:
       # this is v3.0.2 https://github.com/actions/checkout/releases/tag/v3.0.2
       # TODO: replace actions with just using git directly, for security purposes
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
        with:
          fetch-depth: 0

      - name: Checkout Containerd
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
        with:
          path: src/github.com/containerd/containerd
          repository: containerd/containerd
          ref: ${{ matrix.branches }}
          fetch-depth: 0

      - name: Set env
        run: |
          set -x
          echo "GOPATH=${{ github.workspace }}" >> $GITHUB_ENV
          echo "${{ github.workspace }}/bin" >> $GITHUB_PATH
          VERSION=$(git describe --match 'v[0-9]*' --dirty='.m' --always)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          # script/setup/runc-version was introduced in containerd v1.5.0 / v1.4.5 .
          RUNC_COMMIT=$(cat script/setup/runc-version)
          echo "RUNC_COMMIT=${RUNC_COMMIT}" >> $GITHUB_ENV
          GO_VERSION=$(grep GO_VERSION .github/workflows/release.yml | grep -Eo [0-9]\.[0-9]+[^\']+)
          echo "GO_VERSION=${GO_VERSION}" >> $GITHUB_ENV
          TAG_NAME="containerd-${VERSION#v}"
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          TAG_DESCRIPTION="$tag_name Build $(date +'%d.%m.%Y %R')"
          echo "TAG_DESCRIPTION=${TAG_DESCRIPTION}" >> $GITHUB_ENV
        working-directory: src/github.com/containerd/containerd

      - name: Set up Go
        # this is v3.1.0
        uses: actions/setup-go@fcdc43634adb5f7ae75a9d7a9b9361790f7293e2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout runc
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
        with:
          path: src/github.com/opencontainers/runc
          repository: opencontainers/runc
          ref: ${{ env.RUNC_COMMIT }}
          fetch-depth: 0

      - name: Install dependencies
        run: |
          set -x
          sudo add-apt-repository "deb [arch=arm64,s390x,ppc64el] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -sc) main" || true
          sudo add-apt-repository "deb [arch=arm64,s390x,ppc64el] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -sc)-updates main" || true
          sudo dpkg --add-architecture arm64
          sudo dpkg --add-architecture s390x
          sudo dpkg --add-architecture ppc64el
          sudo apt-get update || true
          sudo apt-get install -y \
            crossbuild-essential-arm64 \
            crossbuild-essential-s390x \
            crossbuild-essential-ppc64el \
            libseccomp-dev:amd64 \
            libseccomp-dev:arm64 \
            libseccomp-dev:s390x \
            libseccomp-dev:ppc64el \
            libbtrfs-dev:amd64 \
            libbtrfs-dev:arm64 \
            libbtrfs-dev:s390x \
            libbtrfs-dev:ppc64el

      - name: Create runc.VERSION
        working-directory: src/github.com/containerd/containerd
        run: |
          set -x
          echo "${RUNC_VERSION}" > releases/runc.VERSION

      - name: Build amd64
        env:
          GOOS: linux
          GOARCH: amd64
        working-directory: src/github.com/containerd/containerd
        run: |
          set -x
          make release
          pushd ${{ github.workspace }}/src/github.com/opencontainers/runc
            make static BUILDTAGS="seccomp selinux apparmor"
            mv ./runc ${{ github.workspace }}/src/github.com/containerd/containerd/releases/runc.${GOARCH}
          popd

      - name: Build arm64
        env:
          GOOS: linux
          GOARCH: arm64
          CC: aarch64-linux-gnu-gcc
          CGO_ENABLED: 1
        working-directory: src/github.com/containerd/containerd
        run: |
          set -x
          make release
          pushd ${{ github.workspace }}/src/github.com/opencontainers/runc
            make static BUILDTAGS="seccomp selinux apparmor"
            mv ./runc ${{ github.workspace }}/src/github.com/containerd/containerd/releases/runc.${GOARCH}
          popd
   
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          set -x
          git config --local user.name "kind-ci-robot"
          git config --local user.email "46937763+kind-ci-robot@users.noreply.github.com"
          if git rev-parse "${TAG_NAME}"; then 
            echo "Deleting old tag" && git tag -d "${TAG_NAME}"
          fi
          git tag "${TAG_NAME}"
          
          # add shasum to runc artifacts and copy all artifacts to current workspace
          pushd ${{ github.workspace }}/src/github.com/containerd/containerd/releases
            for asset in runc*; do
              sha256sum $asset > ${asset}.sha256sum
            done
          popd
          # obtain all the artifacts
          assets=()
          for asset in  ${{ github.workspace }}/src/github.com/containerd/containerd/releases/*.tar.gz*; do
            assets+=("-a" "${asset}")
          done
          for asset in ${{ github.workspace }}/src/github.com/containerd/containerd/releases/runc.*; do
            assets+=("-a" "${asset}")         
          done
          # append the artifacts to the release if does not exist
          if curl -sSLf "https://api.github.com/repos/kind-ci/containerd-nightlies/releases/tags/${TAG_NAME}" -o /dev/null; then
            echo "Release exists, skip the build"
            exit 0
          fi
          hub release create "${assets[@]}" -m "Release $TAG_NAME" "$TAG_NAME"
